==========
 nanabozo
==========

``nanabozo`` is a command-line application that translates *CHTML scripts*
into pure C code.

*What is CHTML ?* Well, it's like PHP, but without PHP, just with C...

Download
========
The source code is found on Github: https://github.com/astrorigin/nanabozo

First CGI example
=================
Here is a trivial CHTML example::

    <?
    #define PAGE_TITLE "Hello World Example"

    int main(void) {
        char *world = "World";
        /* Headers */
        print("Content-Type: text/html; charset=utf-8\n\n");
    ?>
    <html>
    <head>
    <title><?= PAGE_TITLE ?></title>
    </head>
    <body>
    <h1><?% "Hello %s!", world ?></h1>
    </body>
    </html>
    <?
        return 0;
    } // end main()
    ?>

That should look familiar to you. Let's put that snippet in a file called
``helloworld.php`` (why not), then we execute ``nanabozo`` like this::

    nanabozo helloworld.php helloworld.c

And now let's examine what ``helloworld.c`` looks like::

    /*
     *      Generated by nanabozo (do not edit)
     *      Sun Jan 14 11:08:12 CET 2018
     */

That is an informational, self-explanatory comment.
You can disable that comment header with **the option -c**, passing it an
empty string (``-c ""``), or have your own comment instead if you want
(``-c "$(cat license.txt)"``).

Next::

    #include <stdio.h>
    #define print(x) fputs(x, stdout)

By default, ``stdio.h`` is included, and the function ``print`` defined.
As you can see, ``stdout`` is the file we are sending our text to, just like
another CGI script.

Next::

    /* BEGIN C (line 1) */
    #define PAGE_TITLE "Hello World Example"

    int main(void) {
        char *world = "World";
        /* Headers */
        print("Content-Type: text/html; charset=utf-8\n\n");
    /* END C (line 8) */

Enclosed by *begin/end* comments, the first part of our C code is given
here, as it was in the CHTML file.
You can omit those comments with **the option -b** if you want, but they
are useful for debugging purposes.

Nothing special here, our CGI needs a ``main()`` function.
Note that the function ``print`` is used to send the usual mandatory headers.

Next::

    print("<html>\n"
    "<head>\n"
    "<title>");

Our HTML script begins. The function ``print`` is used to pass it to ``stdout``.

Next::

    /* BEGIN C= (line 11) */
    print( PAGE_TITLE );
    /* END C= (line 11) */

The C code that was in between the tags ``<?=`` and ``?>`` is given as argument to
the function ``print``. That is still familiar.

Another HTML part follows::

    print("</title>\n"
    "</head>\n"
    "<body>\n"
    "<h1>");

Then, what was in between the tags ``<?%`` and ``?>`` is passed as arguments to
the function ``printf``::

    /* BEGIN C% (line 14) */
    printf( "Hello %s!", world );
    /* END C% (line 14) */

Finally, the rest of the HTML and the end of the ``main()`` function::

    print("</h1>\n"
    "</body>\n"
    "</html>\n");
    /* BEGIN C (line 17) */
        return 0;
    } // end main()
    /* END C (line 20) */

You can compile ``helloworld.c`` and your CGI application is ready.

In a hurry, you can try something like::

    nanabozo helloworld.php | gcc -x c -o helloworld.cgi -

More options
============
``nanabozo`` has four other options that can be useful for advanced applications.

**The option -a** can be used to pass a string to *prepend* to the content of
the CHTML script.

**The option -z** can be used to pass a string to *append* to the content of
the CHTML script.

Our trivial example could be rewritten without the definition of
the ``main()`` function. In ``bash``, it could be like this::

    nanabozo -a $'int main(void) {\n' -z $'\n\treturn 0;\n}' helloworld.php helloworld.c

You could however make things even worse::

    nanabozo -a "$(cat myfile.h myfile.c)" < helloworld.php > helloworld.c

**The option -p** can be used to pass an alternative function name to replace the
``print`` function.

**The option -f** can be used to pass an alternative function name to replace the
``printf`` function.

And if you replace both ``print`` and ``printf``, ``stdio.h`` will not be included.
A command such as::

    nanabozo -p print -f printf helloworld.php helloworld.c

will not have ``stdio.h`` included, nor ``print`` defined. You have to take care of
them on your side.

**The option -h** or **--help** prints some information and exits.

Limitations and bugs
====================
If your CHTML file has lines longer than 255 characters (the humanly acceptable),
you can recompile with ``INPUTSIZE`` defined with a higher value.

And if you find a bug or anything problematic, please contact ``stan(at)astrorigin.com``.

License
=======
``nanabozo`` is licensed under the MIT license::

    nanabozo
    Copyright 2018 Stanislas Marquis <stan@astrorigin.com>

    MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

..